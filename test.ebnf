--------------------------------------------------------------------------------------------
--    EBNF Compiler and Parser Generator                                                  --
--    Copyright (C) 2019  Ekkehard Morgenstern                                            --
--                                                                                        --
--    This program is free software: you can redistribute it and/or modify                --
--    it under the terms of the GNU General Public License as published by                --
--    the Free Software Foundation, either version 3 of the License, or                   --
--    (at your option) any later version.                                                 --
--                                                                                        --
--    This program is distributed in the hope that it will be useful,                     --
--    but WITHOUT ANY WARRANTY; without even the implied warranty of                      --
--    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                       --
--    GNU General Public License for more details.                                        --
--                                                                                        --
--    You should have received a copy of the GNU General Public License                   --
--    along with this program.  If not, see <https://www.gnu.org/licenses/>.              --
--                                                                                        --
--    Contact Info:                                                                       --
--    E-Mail: ekkehard@ekkehardmorgenstern.de                                             --
--    Mail: Ekkehard Morgenstern, Mozartstr. 1, 76744 Woerth am Rhein, Germany, Europe    --
--------------------------------------------------------------------------------------------

WHITESPACE  := /[ \t\r\n]+/ .
COMMENT     := /--[^\n]+\n/ .

TOKEN identifier  := /[a-z0-9-]+/ .
TOKEN str-literal := /'[^']+'/ | /"[^"]+"/ .

-- during parsing of token elements, whitespace and comment skipping will be disabled
-- regular expressions are not interpreted (anymore) but passed through to the outer layer

NAMED-TOKEN   esc-slash      := '\/' .
NAMED-TOKEN   slash          := '/' .
TOKEN-ELEMENT re-def-chr     := '\/' | /[^\/]+/ .
TOKEN         re-expr        := '/' ( ( re-def-chr )+ '/' )! .

NAMED-TOKEN   lparen         := '(' .
NAMED-TOKEN   rparen         := ')' .
NAMED-TOKEN   lbracket       := '[' .
NAMED-TOKEN   rbracket       := ']' .
NAMED-TOKEN   lbrace         := '{' .
NAMED-TOKEN   rbrace         := '}' .
NAMED-TOKEN   column         := '|' .
NAMED-TOKEN   dot            := '.' .
NAMED-TOKEN   fail           := '!' .
NAMED-TOKEN   plus           := '+' .
NAMED-TOKEN   whitespace     := 'WHITESPACE' .
NAMED-TOKEN   comment        := 'COMMENT' .
NAMED-TOKEN   token-element  := 'TOKEN-ELEMENT' .
NAMED-TOKEN   named-token    := 'NAMED-TOKEN' .
NAMED-TOKEN   token          := 'TOKEN' .
NAMED-TOKEN   root           := 'ROOT' .

-- regular productions usually fail silently if they do not match, potentially causing
-- another production in the syntax tree to be tried. to signify failure upon failure to
-- match, '!' can be used in postfix notation.

base-expr   := identifier | str-literal | re-expr | '(' expr ')' [ '+' ] | '[' expr ']' | '{' expr '}' .
fail-expr   := base-expr [ '!' ] .
and-expr    := ( fail-expr )+ .
or-expr     := and-expr { '|' and-expr } .
expr        := or-expr .

prod-specifier   := ':=' expr '.' .
whitespace-prod  := ( "WHITESPACE" | "COMMENT" ) prod-specifier! .
prod-qualifier   := "TOKEN-ELEMENT" | "NAMED-TOKEN" | "TOKEN" | "ROOT" .
qualified-prod   := prod-qualifier ( identifier prod-specifier )! .
regular-prod     := identifier prod-specifier! .
production       := whitespace-prod | qualified-prod | regular-prod .
ROOT prod-list   := ( production )+ .
