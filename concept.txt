
    EBNF Compiler
    Copyright (C) 2019  Ekkehard Morgenstern

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

    Contact Info:
    E-Mail: ekkehard@ekkehardmorgenstern.de 
    Mail: Ekkehard Morgenstern, Mozartstr. 1, 76744 Woerth am Rhein, Germany, Europe

EBNF Compiler
-------------

This compiler translates a variant of the Extended Backus-Naur-Form (EBNF) 
(originally developed by Dr. Niklaus Wirth of ETH Zurich university)
into a form suitable to create syntax analyzers and parsers.

I added a regular expression feature, but otherwise it is very similar to
the original language as far as I can remember it.

Whitespace does not have to be specified, unless the lexical analyzer that 
you plan to use does not support automatic whitespace elimination.

The syntax of this EBNF, written in itself, is as follows (whitespace omitted):

identifier  := /[a-z0-9-]+/ .
str-literal := /'[^']+'/ | /"[^"]+"/ .

-- during parsing of regular expressions, whitespace skipping will be disabled
re-any      := '.' .
re-chr      := '\' /./ | /[^\/.*?[(|]/ .

re-cc-chr   := '\' /./ | /[^\\\]]/ .
re-cc-rng   := re-cc-chr '-' re-cc-chr .
re-cc-item  := re-cc-rng | re-cc-chr .
re-cc-items := re-cc-item { re-cc-item } .
re-cc       := '[' [ '^' ] re-cc-items ']' .

re-base-expr   := re-cc | re-chr | re-any | '(' re-expr ')' .
re-repeat-expr := re-base-expr [ '+' | '*' | '?' ] .
re-and-expr    := re-repeat-expr { re-repeat-expr } .
re-or-expr     := re-and-expr { '|' re-and-expr } .
re-expr        := re-or-expr .

base-expr   := identifier | str-literal | re-expr | '(' expr ')' | '[' expr ']' | '{' expr '}' .
and-expr    := base-expr { base-expr } .
or-expr     := and-expr { '|' and-expr } .
expr        := or-expr .

production  := identifier ':=' expr '.' .
prod-list   := production { production } .





